/*****************************************************************************
*
* Copyright (c) 2000 - 2014, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-442911
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/


// ************************************************************************* //
//                            avtGadget_customFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_Gadget_custom_FILE_FORMAT_H
#define AVT_Gadget_custom_FILE_FORMAT_H

#include <avtSTSDFileFormat.h>
#define int4bytes int


// ****************************************************************************
//  Class: avtGadget_customFileFormat
//
//  Purpose:
//      Reads in Gadget_custom files as a plugin to VisIt.
//
//  Programmer: bwvdnbro -- generated by xml2avt
//  Creation:   Tue Nov 18 11:19:21 PDT 2014
//
// ****************************************************************************

class avtGadget_customFileFormat : public avtSTSDFileFormat
{
  private:
    class Block{
    private:
        std::string _name;
        bool _mesh[6];
        int _streampos[6];
        int _streamsize[6];
        bool _vec;
    
    public:
        Block(std::istream& stream, unsigned int* npart);
        
        bool is_vec();
        
        std::string get_name();
        bool has_data(unsigned int type);
        
        void get_data(std::istream& stream, float* data, unsigned int parttype);
    };

  public:
                       avtGadget_customFileFormat(const char *filename);
    virtual           ~avtGadget_customFileFormat() {;};

    virtual const char    *GetType(void)   { return "Gadget_custom"; };
    virtual void           FreeUpResources(void); 

    virtual vtkDataSet    *GetMesh(const char *);
    virtual vtkDataArray  *GetVar(const char *);
    virtual vtkDataArray  *GetVectorVar(const char *);
    virtual bool ReturnsValidCycle() const { return true; }
    virtual int GetCycle(void);
    virtual bool ReturnsValidTime() const { return true; }
    virtual double GetTime(void);
    virtual int GetCycleFromFilename(const char *f) const
    {
      return GuessCycle(f);
    }

  protected:
//    int4bytes blksize,swap;
//    unsigned long ntot;
    double _masstab[6];
    double _redshift;
    double _time;
    std::string _fname;
    unsigned int _npart[6];
    std::vector<Block*> _blocks;
    
    void read_gadget_head(unsigned int* npart, double* massarr, double* time, double* redshift, std::istream& stream);
    std::vector<Block*> get_blocks(std::istream& stream);
    
    static unsigned int get_blocksize(std::istream& stream){
        unsigned int blocksize;
        stream.read(reinterpret_cast<char*>(&blocksize), sizeof(unsigned int));
        return blocksize;
    }

    virtual void           PopulateDatabaseMetaData(avtDatabaseMetaData *);
};


#endif
